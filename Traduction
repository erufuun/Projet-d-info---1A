#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
@author: okabeshu
"""

# encoding: utf-8
# Pour traduire un texte de l'anglais vers le français
from Learn import *

######################################
#                                    #
#    Traduction avec dictionnaire    # 
#                                    #
######################################
# Transformer une liste de mots (chaine) en une phrase (chaine de caracteres)
def liste_to_char (liste) :
        ch = ""
        for X in liste :
                if (X != ",") and (X != ".") : # and (X != "’") : 
                        ch += " " + X 
                else :
                        ch += X
        if (len(ch) > 0) : 
                ch = ch[1:] # Enlever le premier espace
        return ch

#####################
#       Tests       #
#####################
# print(liste_to_char(["Je", "suis", "correct", "."]))
# "Je suis correct."
# print(liste_to_char(["Exemple", ":", "la ponctuation", ",", "c", "’", "est", "complexe", "."]))
# "Exemple : la ponctuation, c’ est complexe."

# Supprimer les espaces en trop entre les mots.
def suppr_espaces (trad) : 
    # trad est une phrase traduite en français (chaîne de caractère)
    phraselist = hashify_sent (trad)
    sansesp = []
    for X in phraselist :
        #print("X =", X)
        if X != "" :
            sansesp += [X]
    #print("sansesp =", sansesp)
    return liste_to_char(sansesp)

#####################
#       Tests       #
#####################
# example = "Puis, je pensé idée Lotara,    j ai pensé Lotara pensé  son vieil et    guérir qui  j ai pensé Lotara pensé  son vieil âge et ses blessures dues à cette industrie du loisir."
# print(suppr_espaces(example))
# Puis je pensé idée Lotara j ai pensé Lotara pensé son vieil et guérir qui j ai pensé Lotara pensé son vieil âge et ses blessures dues à cette industrie du loisir

# Traduction mot a mot : un texte sous forme de chaîne donne une chaîne de mots.
def motamot (brut, dic) : 
    Texte = paragraphy (brut) # Texte découpé en paragraphes (liste de liste de phrases).
    trad, t = [], ''
    for par in Texte : # Par est une liste de phrases
        trad += [motamot_par (par, dic)] # Traduction du paragraphe
        #print("trad =", trad)
    for para in trad :
        #print("para =", para)
        t += liste_to_char (para) + " "
    return t

# Traduction mot a mot : un texte sous forme de liste de phrases donne une liste de mots.
# Si mot manquant, mot laisse tel quel
def motamot_par (text, dic) :
    trad = [] # Texte traduit
    for sent in text : # text est une liste de phrases
        sentence = hashify_sent (sent) # Couper la phrase pour en faire une liste de mots
        for X in sentence : # Traduction un mot = un mot
            if (X in dic) and (X != "") : # Mot anglais present dans le dictionnaire : X dictionnaire associe
                choisir = [(nomb, trad) for trad, nomb in dic[X].items()]
                #print("choisir =", choisir)
                choisir = sorted(choisir, key=itemgetter(0), reverse = True) # Ordre decroissant de freq
                trad += [choisir[0][1]] # Traduction la plus frequente
            elif X == "" : # Ponctuation
                trad+=[","]
            else : # Mot absent dans le dictionnaire : tel quel
                trad += [X]
        trad += "."
    #print("trad =", trad)
    return trad

####################################
#                                  #
#    Correction du dictionnaire    # 
#                                  #
####################################
# Double controle
# Faire une traduction EN-FR et une FR-EN pour voir les points communs.
def doublecontrole_id (text, texte, dico) :
    daf = identique(text, texte, {}) # EN-FR
    dfa = identique(texte, text, {}) # FR-EN
    for X in daf :
        if (dfa[daf[X]]==X) : # Meme traduction quel que soit le sens
            dico[X] = dico.get(daf[X], daf[X])
    return dico

# Trouve l'indice d'un élément dans une liste
def trouve_index (liste, mot) : 
    # Le mot est supposé être dans la liste
    n = len(liste)
    i, j = 0, -1
    while (j < 0) and (i < n) : 
        if liste[i] == mot : # Le premier index
            j = i
        i += 1
    return j

#####################
#       Tests       #
#####################
# liste = [0,1,2,3,4,5,6,7,8,9,10,7]
# print(trouve_index (liste, 7))

# Améliorer la traduction
def meilleure_trad (word, trad, ref, dico) : 
    # word est supposé être dans dico
    d = dico[word]
    coef = d[trad] # Coefficient de la mauvaise traduction
    apprend_mot (word, ref, dico, coef+1) # Améliorer la traduction 

#####################
#       Tests       #
#####################
# dic = {"Hello" : {"Bonjour" : 5}, "I" : {"je" : 3, "j'ai" : 7}}
# meilleure_trad ("I", "j'ai", "je", dic)
# {'Hello': {'Bonjour': 5}, 'I': {"j'ai": 7, 'je': 11}}
# dic = {"Hello" : {"Bonjour" : 5}, "I" : {"je" : 3, "j'ai" : 7}}
# meilleure_trad ("I", "j'ai", "Je", dic)
# {'Hello': {'Bonjour': 5}, 'I': {'Je': 8, "j'ai": 7, 'je': 3}}

# Faire correspondre les liste pour qu'elles aient la même longeur
# Ref est la liste de référence
def balise_init (liste, ref) : 
    n = len(ref)
    balise = [["", 0]] * n
    # Initialiser la balise : remplir avec ce que l'on a déjà trouvé
    for i in range (n) : 
        mot = ref[i]
        if mot in liste : # Si le mot est déjà bien traduit
            j = trouve_index (liste, mot)
            balise[i] = [mot, j]
    return balise

#####################
#       Tests       #
#####################
trad = ["Vieil", "ami", "pourquoi", "là", "toi", "paraissaient", "timide"]
ref = ["Vieil", "ami", "pourquoi", "es-tu", "si", "timide"]
print(baliser (trad, ref) )


def retro_lgn (sentence, phrase, traduction, dico) :
    n = len (sentence) # Référence
    balise = [["", 0]] * n
    # Initialiser la balise avec les traductions correctes
    j, k = 0, 0 # Indice de suivi dans la phrase de référence et la traduction
    for i in range (n) : # Parcourir la phrase
        wo = sentence[i]
        d = dico[wo] # Dictionnaire des possibilités de traduction
        ref, trad = phrase[j], traduction[k] # mot référence et mot traduit
        if (ref == trad) and (ref in d) : # Si la traduction est bien là 
            balise[i] = [wo, j]
        J = j
        while (ref not in d) and (J < len(phrase)) :
            J += 1
            ref = phrase[J]
        j = J
            
            
    pass

# Faire un rétro contrôle du résultat obetnu.
# Comparer la traduction par l'algorithme avec la vraie traduction.
def retro (text, texte, dic) : 
    # trad est la traduction par une fonction de traduction
    trad = motamot (text, dic) # Traduction à améliorer
    txt, trd, ref = paragraphy_fal(text), paragraphy_fal(trad), paragraphy_fal (texte)
    n = len(txt) # (= len(trd) = len(ref))
    for i in range (n) : # Parcourir le texte
        sentence, phrase, traduction = txt[i], trd[i], ref[i] 
        bal_sen, bal_phr, bal_tra = hashify_sent(sentence), hashify_sent (phrase), hashify_sent (traduction)
        print(bal_sen, bal_phr, bal_tra)
        
        pass

#####################
#       Tests       #
#####################
text, texte = "Hello, I am here.", "Bonjour, je suis ici."
#print(retro(text, texte, {"Hello" : {"Bonjour" : 5}, "I" : {"je" : 3, "j'ai" : 7}, "here" : {"ici" : 2}, "am" : {"suis" : 6}}))


