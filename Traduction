#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
@author: okabeshu
"""

# encoding: utf-8
# Pour traduire un texte de l'anglais vers le français
from Learn import *
from copy import *

######################################
#                                    #
#    Traduction avec dictionnaire    # 
#                                    #
######################################
# Transformer une liste de mots (chaine) en une phrase (chaine de caracteres)
def liste_to_char (liste) :
        ch = ""
        for X in liste :
                if (X != ",") and (X != ".") : # and (X != "’") : 
                        ch += " " + X 
                else :
                        ch += X
        if (len(ch) > 0) : 
                ch = ch[1:] # Enlever le premier espace
        return ch

#####################
#       Tests       #
#####################
# print(liste_to_char(["Je", "suis", "correct", "."]))
# "Je suis correct."
# print(liste_to_char(["Exemple", ":", "la ponctuation", ",", "c", "’", "est", "complexe", "."]))
# "Exemple : la ponctuation, c’ est complexe."

# Supprimer les espaces en trop entre les mots.
def suppr_espaces (trad) : 
    # trad est une phrase traduite en français (chaîne de caractère)
    phraselist = hashify_sent (trad)
    sansesp = []
    for X in phraselist :
        #print("X =", X)
        if X != "" :
            sansesp += [X]
    #print("sansesp =", sansesp)
    return liste_to_char(sansesp)

#####################
#       Tests       #
#####################
# example = "Puis, je pensé idée Lotara,    j ai pensé Lotara pensé  son vieil et    guérir qui  j ai pensé Lotara pensé  son vieil âge et ses blessures dues à cette industrie du loisir."
# print(suppr_espaces(example))
# Puis je pensé idée Lotara j ai pensé Lotara pensé son vieil et guérir qui j ai pensé Lotara pensé son vieil âge et ses blessures dues à cette industrie du loisir

# Traduction mot a mot : un texte sous forme de chaîne donne une chaîne de mots.
def motamot (brut, dic) : 
    Texte = paragraphy (brut) # Texte découpé en paragraphes (liste de liste de phrases).
    trad, t = [], ''
    for par in Texte : # Par est une liste de phrases
        trad += [motamot_par (par, dic)] # Traduction du paragraphe
        #print("trad =", trad)
    for para in trad :
        #print("para =", para)
        t += liste_to_char (para) + " "
    return t

# Traduction mot a mot : un texte sous forme de liste de phrases donne une liste de mots.
# Si mot manquant, mot laisse tel quel
def motamot_par (text, dic) :
    trad = [] # Texte traduit
    for sent in text : # text est une liste de phrases
        sentence = hashify_sent (sent) # Couper la phrase pour en faire une liste de mots
        for X in sentence : # Traduction un mot = un mot
            if (X in dic) and (X != "") : # Mot anglais present dans le dictionnaire : X dictionnaire associe
                trad += [motamot_mot(X, dic)] # Traduction la plus frequente
            elif X == "" : # Ponctuation
                trad +=[","]
            else : # Mot absent dans le dictionnaire : tel quel
                trad += [X]
        trad += ["."]
    #print("trad =", trad)
    return trad

#####################
#       Tests       #
#####################
# di = {'Hello': {'Bonjour': 5}, 'I': {'Je': 8, "j'ai": 7, 'je': 9}, "swim" : {"nage" : 3}, "" : {"" : 5}}
# text = ["Hello, I swim"]
# print(motamot_par (text, di))
# Bonjour, je nage. 

def motamot_mot (word, dic) :
    choisir = [(nomb, trad) for trad, nomb in dic[word].items()]
    #print("choisir =", choisir)
    choisir = sorted(choisir, key=itemgetter(0), reverse = True) # Ordre decroissant de freq
    return (choisir[0][1]) # Traduction la plus fréquente

#####################
#       Tests       #
#####################
#di = {'Hello': {'Bonjour': 5}, 'I': {'Je': 8, "j'ai": 7, 'je': 3}}
#print(motamot_mot ("Hello", di))
#Bonjour

####################################
#                                  #
#    Correction du dictionnaire    # 
#                                  #
####################################
# Double controle
# Faire une traduction EN-FR et une FR-EN pour voir les points communs.
def doublecontrole_id (text, texte, dico) :
    daf = identique(text, texte, {}) # EN-FR
    dfa = identique(texte, text, {}) # FR-EN
    for X in daf :
        if (dfa[daf[X]]==X) : # Meme traduction quel que soit le sens
            dico[X] = dico.get(daf[X], daf[X])
    return dico

# Trouve l'indice d'un élément dans une liste
def trouve_index (liste, mot) : 
    # Le mot est supposé être dans la liste
    n = len(liste)
    i, j = 0, -1
    while (j < 0) and (i < n) : 
        if liste[i] == mot : # Le premier index
            j = i
        i += 1
    return j

#####################
#       Tests       #
#####################
# liste = [0,1,2,3,4,5,6,7,8,9,10,7]
# print(trouve_index (liste, 7))

# Améliorer la traduction, modifie le dictionnaire
def meilleure_trad (word, ref, trad, dico) : 
    # word est supposé être dans dico
    #print("word =", word, "ref =", ref)
    d = dico[word]
    #print("d =", d)
    coef = 0
    if ref != trad :
        coef = d[trad] # Coefficient de la mauvaise traduction
    #print("coef =", coef)
    apprend_mot (word, ref, dico, coef+1) # Améliorer la traduction 

#####################
#       Tests       #
#####################
# dic = {"Hello" : {"Bonjour" : 5}, "I" : {"je" : 3, "j'ai" : 7}}
# meilleure_trad ("I", "j'ai", "j'ai", dic)
# {'Hello': {'Bonjour': 5}, 'I': {"j'ai": 8, 'je': 3}}
# dic = {"Hello" : {"Bonjour" : 5}, "I" : {"je" : 3, "j'ai" : 7}}
# meilleure_trad ("I", "je", "j'ai", dic)
#  {'Hello': {'Bonjour': 5}, 'I': {"j'ai": 7, 'je': 11}}
# dic = {"Hello" : {"Bonjour" : 5}, "I" : {"je" : 3, "j'ai" : 7}}
# meilleure_trad ("I", "Je", "j'ai", dic)
# {'Hello': {'Bonjour': 5}, 'I': {'Je': 8, "j'ai": 7, 'je': 3}}

# Faire correspondre les listes entre elles pour connaître les traductions
# Ref est la liste de référence ; ne change pas dico à la fin de l'exécution
def balise_init (anglais, ref, liste, dico) :
    n = len(anglais)
    balise = [[0, 0, False]] * n # Indice de ref, puis de liste
    # Initialiser la balise : remplir avec ce que l'on a déjà trouvé
    for i in range (n) : 
        word = anglais[i] # Le mot anglais à traduire
        d = dico[word] # Dictionnaire des possibiltiés de traduction
        # Classer dans l'ordre décroissant de fréquence
        trie = [(nomb, trad) for trad, nomb in d.items()]
        #print("trie =", trie)
        trie = sorted(trie, key=itemgetter(0), reverse = True)
        tri = [trad for nomb, trad in trie] # Liste triée
        #print("tri =", tri)
        ind = False # Indicateur pour voir si on a trouvé le mot dans d ou non
        e = False # Fiabilité de la traduction
        # I. ref contient la traduction de word
        for mot in d : # Évaluer les traductions dans l'ordre décroissant de probabilité
            if (mot in ref) and (not ind) : 
                #print("mot =", mot)
                j = trouve_index (ref, mot)
                # 1. trad contient le même mot
                if mot in liste :
                    k = trouve_index (liste, mot)
                    #print("k1 =", k)
                    e = True # Fiabilité de la traduction
                # 2. trad ne contient pas le mot en question
                else :
                    tr = motamot_mot(word, dico)
                    k = trouve_index (liste, tr)
                    #print("k2 =", k)
                ind = True
        # II. ref ne contient pas la traduction de word
        if (not ind) : 
            if i > 0 :
                j = balise[i-1][0] + 1 # Le mot suivant
                #print("jsec =", j)
            else : 
                j = 0
            tr = motamot_mot(word, dico)
            #print("tr =", tr)
            k = trouve_index (liste, tr)
            #print("k3 =", k)
        balise[i] = [j, k, e]
    # Corriger la balise
    li = [(ref, fia) for ref, tra, fia in balise]
    #print("li =", li)
    laux = [-1] * n
    # Enregistrer les traductions fiables
    for i in range (n) : 
        X = li[i]
        if X[1] : # Si la traduction est fiable
            laux[i] = X[0]
    #print("laux =", laux)
    i = 0
    # Affecter les indices
    while (i < n) : 
        pash = False
        j = i
        while (j < n - 1) and (laux[j] == -1) : # Traduction non fiable
            j += 1
            pash = True
        #print("i =", i, "j =", j)
        p = laux[j] # Valeur à enlever
        if j - i < 4 : 
            for x in range (i, j) :
                if (balise[x][0] == p) and (p > 1) :
                    balise[x][0] = p - 1
        i = j + 1
    return balise

#####################
#       Tests       #
#####################
#trad = ["Vieil", "ami", "pourquoi", "là", "toi", "paraissaient", "timide"]
#ref = ["Vieil", "ami", "pourquoi", "es-tu", "si", "timide"]
#sen = ["Old", "friend", "why", "are", "you", "so", "shy"]
#dico = {"Old" : {"Vieil" : 3},'friend': {'ami': 7}, 'are': {'là': 2},'so': {'paraissaient': 2},'why': {'pourquoi': 50},'you': {'toi': 12, 'au': 2, 'haut': 2}, 'shy': {'timide': 2}}
#print(balise_init (sen, ref, trad, dico))

#tr = ["Il", "aime", "pommes"]
#re = ["Il", "aime", "les", "pommes"]
#se = ["He", "likes", "apples"]
#dicti = {"He":{"Il": 3}, "likes":{"aime":7},"apples":{"pommes" :4}}
#print(balise_init (se, re, tr, dicti))

def retro_lgn (sentence, phrase, traduction, dico) :
    n = len (sentence) # Référence
    balise = balise_init (sentence, phrase, traduction, dico) # Relier les trois phrases.
    #print("balise =", balise)
    for i in range (n - 1) :
        j, k = balise[i][0], balise[i][1] # j : ref, k : trad
        ji, ka = balise[i+1][0], balise[i+1][1] # ji : ref, ka : trad
        word = sentence[i] 
        ref = ""
        if balise[i][2] : # Si la traduction est fiable
            ref = phrase[j]
            #print("ref1 =", ref)
        else : 
            for e in range (j, ji) : 
                ref += " " + phrase[e]
            ref = ref[1:]
            #print("ref2 =", ref)
        trad = motamot_mot(word, dico)
        meilleure_trad (word, ref, trad, dico)
    # Pour le dernier mot
    meilleure_trad (sentence[n-1], phrase[balise[n-1][0]], traduction[balise[n-1][1]], dico)

#####################
#       Tests       #
#####################
# tradu = ["Vieil", "ami", "pourquoi", "là", "toi", "paraissaient", "timide"]
# refe = ["Vieil", "ami", "pourquoi", "es-tu", "si", "timide"]
# sent = ["Old", "friend", "why", "are", "you", "so", "shy"]
# dic = {"Old" : {"Vieil" : 3},'friend': {'ami': 7}, 'are': {'là': 2},'so': {'paraissaient': 2},'why': {'pourquoi': 50},'you': {'toi': 12, 'au': 2, 'haut': 2}, 'shy': {'timide': 2}}
# retro_lgn(sent, refe, tradu, dic)
#{'Old': {'Vieil': 4},'are': {'es-tu': 3, 'là': 2},'friend': {'ami': 8},'shy': {'timide': 3},'so': {'paraissaient': 2, 'si': 3},'why': {'pourquoi': 51},'you': {'': 13, 'au': 2, 'haut': 2, 'toi': 12}}

# Faire un rétro contrôle du résultat obetnu.
# Comparer la traduction par l'algorithme avec la vraie traduction.
# Le dictionnaire de départ n'est pas modifié
def retro (text, texte, dic) : 
    # trad est la traduction par une fonction de traduction
    trad = motamot (text, dic) # Traduction à améliorer
    txt, trd, ref = paragraphy_fal(text), paragraphy_fal(trad), paragraphy_fal (texte)
    n = len(txt) # (= len(trd) = len(ref))
    dico = deepcopy(dic) # Copie sans alias : ne pas modifier dic
    for i in range (n) : # Parcourir le texte
        sentence, phrase, traduction = txt[i], ref[i], trd[i]
        #print("sentence =", sentence, "phrase =", phrase)
        bal_sen, bal_phr, bal_tra = hashify_sent(sentence), hashify_sent (phrase), hashify_sent (traduction)
        #print("bal_sen =", bal_sen, "bal_phr =", bal_phr, bal_tra)
        #print("dic =", dic)
        retro_lgn(bal_sen, bal_phr, bal_tra, dico)
        #print("dico =", dico, "dic =", dic)
    filtre_vide(dico)
    ponctu(dico)
    return dico

#####################
#       Tests       #
#####################
# text, texte = "Hello, I am here.", "Bonjour, je suis ici."
# print(retro(text, texte, {"" : {"" : 1}, "Hello" : {"Bonjour" : 5}, "I" : {"je" : 3, "j'ai" : 7}, "here" : {"ici" : 2}, "am" : {"suis" : 6}}))
# {'': {'': 0}, 'Hello': {'Bonjour': 6}, 'I': {'je': 11, "j'ai": 7}, 'here': {'ici': 2}, 'am': {'suis': 7}}

